[

{
"title"    : "About the Jekyll Polymer Theme",
"category" : "",
"tags"     : "",
"url"      : "/2015/06/19/about-jekyll-polymer-theme.html",
"date"     : "2015 June 19",
"content"  : "This theme was created using the Google’s Polymer 1.0. It’s currently a first draft, so there are still features I plan to add and fix. (See the Github repository for details.)I created this theme because I couldn’t figure out how to set up a Jekyll project to play nicely with Polymer, and because I didn’t find any Jekyll blog themes available that used Polymer or followed Google’s material design specifications.Structure  elements/: Custom web components using Polymer  scripts/: Javascript. Will be minimized when built.  styles/: Custom CSS. CSS used here will be minimized when built.  bower_components: Content installed via bower goes here  node_modules: Content installed via npm goes hereBuild InstructionsThis part is pretty brutal right now but gets the job done. Hopefully I’ll get better with gulp and clean this up soon.For now, just use Jekyll to build and serve. The gulp stuff doesn’t really work yet."
} ,

{
"title"    : "Post with blocks of text",
"category" : "",
"tags"     : "",
"url"      : "/2015/06/17/hipsum.html",
"date"     : "2015 June 17",
"content"  : "Schlitz YOLO synth sriracha lumbersexual magna, lo-fi leggings nostrud pug Carles XOXO hoodie eiusmod. Ea officia crucifix sunt lumbersexual nesciunt, jean shorts Etsy occupy tousled ennui irony. Adipisicing exercitation bespoke, Pinterest drinking vinegar officia food truck aliquip. Chillwave Intelligentsia four loko flannel cornhole bespoke. Ea chillwave ennui anim commodo. Wayfarers brunch trust fund crucifix, squid kitsch health goth Pitchfork cliche Etsy sustainable iPhone distillery 8-bit. Thundercats non Portland forage minim selfies, food truck irure mustache.Enim cardigan Tumblr, Thundercats trust fund Godard Austin cliche occaecat literally post-ironic drinking vinegar salvia magna small batch. Brunch lomo chambray delectus narwhal whatever, sriracha Marfa paleo twee. Meditation dreamcatcher tattooed Truffaut ullamco. Try-hard deep v stumptown quis Vice mixtape, ad Etsy odio paleo quinoa. Ennui seitan put a bird on it banjo culpa. Narwhal before they sold out jean shorts ad ullamco, et ennui magna. Kickstarter paleo listicle nulla, occaecat incididunt nesciunt retro salvia.Ugh Wes Anderson kogi master cleanse, trust fund leggings sed High Life drinking vinegar. Ad cornhole artisan dreamcatcher YOLO, labore Banksy eiusmod messenger bag enim tofu culpa. High Life qui street art cardigan. Trust fund Banksy keffiyeh pickled, Brooklyn single-origin coffee actually salvia. Sustainable id mlkshk whatever. PBR cillum drinking vinegar swag. Keytar magna cold-pressed brunch.Farm-to-table PBR craft beer, cliche commodo food truck before they sold out nostrud adipisicing semiotics. Nesciunt kitsch Carles, typewriter banjo sapiente bitters four dollar toast migas. Umami tousled irony taxidermy, PBR +1 bespoke culpa. Kogi aliqua single-origin coffee, shabby chic nisi trust fund master cleanse mumblecore aute Banksy quinoa. Mlkshk small batch gastropub jean shorts. You probably haven’t heard of them vegan Tumblr, odio Blue Bottle iPhone stumptown freegan ut tempor selvage biodiesel post-ironic nesciunt. Swag culpa bespoke, mixtape Tumblr American Apparel ut Pitchfork.Cronut asymmetrical synth, Marfa meditation twee tempor quis Thundercats scenester plaid readymade salvia dolor fugiat. Vice assumenda flannel reprehenderit before they sold out, flexitarian normcore locavore pickled chillwave. Aliqua in wayfarers, cardigan narwhal esse mustache tote bag 8-bit placeat YOLO. Typewriter master cleanse cold-pressed food truck. DIY YOLO gentrify, freegan mustache ethical nesciunt gluten-free small batch tofu. Placeat tempor artisan, delectus ennui duis incididunt irure pariatur skateboard. Narwhal wolf esse leggings, bitters Williamsburg put a bird on it enim swag four dollar toast Vice Schlitz cardigan irony dreamcatcher.Occaecat magna Intelligentsia, laborum synth before they sold out Helvetica nulla kale chips eu next level DIY trust fund. Forage pour-over scenester ut meggings. Food truck eu labore 90’s, deserunt messenger bag next level paleo PBR&amp;amp;B pork belly. Jean shorts DIY before they sold out direct trade, vegan tote bag culpa mixtape nesciunt slow-carb listicle ennui put a bird on it Brooklyn. Ut cronut lumbersexual, letterpress stumptown delectus seitan reprehenderit Bushwick messenger bag incididunt street art polaroid lomo hella. Do voluptate pork belly, fanny pack direct trade tote bag nihil. Mumblecore aesthetic Tumblr VHS master cleanse Portland."
} ,

{
"title"    : "Image in front matter (featured image)",
"category" : "",
"tags"     : "",
"url"      : "/jekyll/update/2015/06/10/featured-image.html",
"date"     : "2015 June 10",
"content"  : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom. You really suck.&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll’s dedicated Help repository."
} ,

{
"title"    : "Welcome to Jekyll!",
"category" : "",
"tags"     : "",
"url"      : "/2015/06/08/welcome-to-jekyll.html",
"date"     : "2015 June 8",
"content"  : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve --watch, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll’s dedicated Help repository."
} ,

{
"title"    : "Typography",
"category" : "",
"tags"     : "",
"url"      : "/2015/06/08/typography.html",
"date"     : "2015 June 8",
"content"  : "Here are the different features and styles available for posts written in Markdown.HeadingsHeading 1Heading 2Heading 3Heading 4Heading 5Heading 6TablesMarkdown Extra has a special syntax for tables:            Item      Value                  Computer      1600 USD              Phone      12 USD              Pipe      1 USD      You can specify column alignment with one or two colons:            Item      Value      Qty                  Computer      1600 USD      5              Phone      12 USD      12              Pipe      1 USD      234      Lists  Item 1  Item 2          Subitem 2.1      Subitem 2.2        Item 3BlockquotesYou can write block quotes.  This is a block quote.It’s split over multiple lines.  It can also have multiple paragraphs.Math (with MathJax)You can render LaTeX mathematical expressions using MathJax, as on math.stackexchange.com:There are inline equations like ( y = x + 2 ) indicated by ( ... ).You can also display an equation (not inline displayed) using inline code, like [ y = x + 4] which you do with [ ... ].Or you can display a block of math by surrounding it with $$ ... $$. Like this:  Tip: Make sure you include MathJax into your publications to render mathematical expression correctly. Your page/template should include something like:&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://stackedit.io/libs/MathJax/MathJax.js?config=TeX-AMS_HTML&quot;&amp;gt;&amp;lt;/script&amp;gt;CodeInline codeCode embedded in a paragraph looks like this is code. Code can also be in blocks with or without line numbers.Code blocks (fenced code)Code blocks have syntax highlighting courtesy of highlight.js. You can specify the code language and whether you want the code block to include line numbers. (You can include line numbers using just linenos instead of linenos=table, but this puts the line numbers in the same lines as the code so that it becomes impossible to copy and paste.)With line numbers (as table):12345  def print_hi(name)    puts &quot;Hi, #{name}&quot;  end  print_hi(&#39;Tom&#39;)  #=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT. This is a long line to test scrolling and wrapping in code.Without line numbers:  def print_hi(name)    puts &quot;Hi, #{name}&quot;  end  print_hi(&#39;Tom&#39;)  #=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT. This is a long line to test scrolling and wrapping in code.With line numbers (inline):12345  def print_hi(name)    puts &quot;Hi, #{name}&quot;  end  print_hi(&#39;Tom&#39;)  #=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT. This is a long line to test scrolling and wrapping in code.Definition ListsMarkdown Extra has a special syntax for definition lists too:  Term 1  Term 2  Definition A  Definition B  Term 3      Definition C        Definition D          part of definition D      DividersDivide up sections and stuff with dividers.They look like that.Font weights and stylesThis text is bold text.This is italicized text.Links and FootnotesYou can create footnotes like this1.You can embed links with a direct link, like this link to Google. Links can also be in a separated form like this link to the Jekyll documention. (That’s useful if you want to link to the same website multiple times like this.)            Here is the text of the footnote. &amp;#8617;      "
} ,

{
"title"    : "Shiny Matlab Figures: Exporting",
"category" : "",
"tags"     : "Matlab, figures, graphs",
"url"      : "/2014/12/15/shiny-matlab-figures-exporting.html",
"date"     : "2014 December 15",
"content"  : "So far in our quest to make better Matlab figures, we’ve looked at an alternative way to draw error bars and adjusting parameters to make figures more readable. Last (for now) but not least: how to best get those figures out of Matlab and into the real world. There are some built-in methods, but I’ve found they don’t work quite as well as an alternative from the Matlab File Exchange.A note on all of these: The figures were exported without resizing the figure window, which is how I make my figures unless I have a compelling reason to change the aspect ratio or size. If you scale the window size, your lines and fonts will be smaller relative to the graph.##PNGThe simplest method is to directly save the figure as a PNG file with the save button or command line. (Note: never use JPEG for graphics like this. JPEGs are compressed and the edges and borders in the image will look bad). This is the result:You’ll notice, though, that the edges and text look somewhat choppy because the output has no anti-aliasing. Also, sometimes the x-axis label is cut off, as happened here. And last but not least, you can’t do any refinements or editing of the image after it’s created.##EPSThe next option is to save the figure in an editable vector format. Matlab will let you directly save EPS files for this purpose. Here’s the result if we save as EPS, then open the file in Inkscape (for editing) and export as a PNG from there:This looks pretty much the same as the PNG, with the same problems! Why? Because EPS files don’t support transparency and our figure includes a patch with transparency, Matlab exports the entire thing as a raster (pixel-based) image embedded in the EPS. So we’ve gained nothing. EPS works OK if you have a figure without transparency, but the files are a little strange (such as poor letter spacing) and hard to work with in my preferred, free vector editor of Inkscape.##SVGWhich brings us to the final and (in my opinion) best way to export images: plot2svg. It’s available for download on the Matlab File Exchange. Simply download the file, add it to your path in Matlab, and call plot2svg. It will save the current figure as an SVG, which is a more advanced vector file format that supports things like transparency and is really easy to work with in Inkscape. Here’s the result when exported as a PNG from Inkscape:That’s one shiny-looking graph. Making adjustments to the graph like fonts, labels, and combining graphs becomes really easy working with SVG files. Plus, you can do things like export them as PNGs of any size or export them as scalable PDFs to embed in a document.The worst “export” of a Matlab graph I’ve seen was a screen capture of the Matlab window copied and pasted onto a poster. Now you can feel snooty about how ridiculously awesome your figures look in comparison."
} ,

{
"title"    : "Shiny Matlab Figures: Sizing and Parameters",
"category" : "",
"tags"     : "Matlab, figures",
"url"      : "/2014/12/15/shiny-matlab-figures-sizing-and-parameters.html",
"date"     : "2014 December 15",
"content"  : "In my never-ending quest to create decent-looking graphs with Matlab, one challenge is the default parameters for figures, particularly in terms of font size and line thickness. These defaults look alright for looking at the figures yourself to figure out what’s going on. But if you want to export them to use in a presentation, poster, or paper, the lines are too thin and the fonts too small. Using the same data generation as in my previous post, it looks something like this:That comes from this little bit of Matlab code:% Plotting with default settingslegend_labels = {&#39;Square Root Growth&#39;, &#39;Linear Growth&#39;};figurehold ontitle(&#39;Plot with default values&#39;)xlabel(&#39;Percent Complete&#39;)ylabel(&#39;Arbitrary Values&#39;)plot(x_vals, data_mean, &#39;b&#39;)plot(x_vals, data2_mean, &#39;r&#39;)legend(legend_labels)I mean, that figure doesn’t look bad, but this looks a lot slicker:There are a few modifications to the defaults I’ve figured out along the way to come to this, so that this figure comes from:% Graphically refined plottingfont_size = 16;title_size = 20;legend_labels = {&#39;Square Root Growth&#39;, &#39;Linear Growth&#39;};figureset(gca, &#39;Box&#39;, &#39;off&#39;, ... % Remove outline for top/right of graph        &#39;FontSize&#39;, font_size, ... % Set size of tick and axis labels        &#39;LineWidth&#39;, 2) % Set width of axes to 2hold ontitle(&#39;Graphically refined plotting&#39;, &#39;FontSize&#39;, title_size, &#39;FontWeight&#39;, &#39;bold&#39;)xlabel(&#39;Percent Complete&#39;, &#39;FontWeight&#39;, &#39;Bold&#39;)ylabel(&#39;Arbitrary Values&#39;, &#39;FontWeight&#39;, &#39;Bold&#39;)plot(x_vals, data_mean, &#39;b&#39;, &#39;LineWidth&#39;, 2)plot(x_vals, data2_mean, &#39;r&#39;, &#39;LineWidth&#39;, 2)legend(legend_labels, &#39;Location&#39;, &#39;NorthWest&#39;)legend(&#39;boxoff&#39;)Let’s go through each of the pieces here.  Font sizes: By setting variables for the title and font sizes, it’s easier to make them consistent (and modify them) for multiple figures produced in a file. I’ve found 16 and 20 pt fonts to work well.  set(gca, ...): This sets a couple of parameters for the current set of axes. The ‘Box’ ensures that there no lines are placed on the top and right sides of the figure. Without this, they’ll show up in some (but not all!) figures. I think it looks nicer without them. ‘FontSize’ makes use of the variable set above to change the size of text for axes labels and legends. Setting the ‘LineWidth’ will make the axes and tick marks thicker, but doesn’t set the thickness of the lines in the plots.  Title and Labels: Here you manually set the size of the title and make the labels bold. It just makes things stand out better.  &#39;LineWidth&#39;: You have to manually set the line thickness for every plot you make.  Legend: In the first figure, the legend hid part of the data. However, legends can be re-positioned (take a look at ‘Location’ in the legend properties documentation). I also got rid of the box (and background) of the legend, which I think just looks ugly.Just like with plotting the error bars as patches, this takes a little more work and code. The result once again, though, is much nicer-looking, professional graphs that are much easier for your audience to actually read."
} ,

{
"title"    : "Shiny Matlab Figures: Drawing Error with Patches",
"category" : "",
"tags"     : "Matlab, plots, figures",
"url"      : "/2014/12/15/shiny-matlab-figures-drawing-error-with-patches.html",
"date"     : "2014 December 15",
"content"  : "I make a lot of Matlab figures. That’s an occupational hazard of being the undergraduate in a research lab, I suppose. Over the past few years, though, the graphically-conscious side of me has gotten annoyed at the terrible Matlab figures I’ve seen on posters and even in papers. I have also come up with my own tricks to create really gorgeous Matlab figures. Over the next few posts, I’ll share a couple of them with you, including:  Plotting error with patches instead of error bars  Changing default figure drawing parameters and sizing  Exporting figuresLet’s start with the first one: error bars. Error bars are great when you have a few data points, but when you have more continuous data, it gets messy and hard to tell what’s going on, like this:This is created using a pretty simple script in Matlab. The data is generated pseudo-randomly:% Generate pseudo-random datanum_data_points = 25;data = rand(10, num_data_points);for i=1:size(data, 2)    data(:,i) = data(:,i)*i^.5;end% x valuesx_max = 100;% Calculate mean and standard deviation of datadata_mean = mean(data,1);data_std = std(data,0,1);Then it’s plotted with a few lines of code using the errorbar function:% Plotting error with errorbarfigureerrorbar(x_vals, data_mean, data_std, &#39;LineWidth&#39;, 2)title(&#39;Plot error with errorbar&#39;)xlim([0 x_max])However, I’ve discovered that using the patch function in Matlab can create much more visually appealing and easier to interpret graphs like this:This requires some additional code:% Plotting error with patchesfigurehold ontitle(&#39;Plot error with patch&#39;)xlim([0 x_max])% Loop the x values back to the startpatch_x_vals = [x_vals, x_vals(end:-1:1)];% Create the data+std and data-std valuespatch_data_std = [data_mean-data_std, data_mean(end:-1:1)+data_std(end:-1:1)]; plot(x_vals, data_mean, &#39;LineWidth&#39;, 2)patch(patch_x_vals, patch_data_std, [0 0 1], &#39;EdgeColor&#39;, &#39;None&#39;, &#39;FaceAlpha&#39;, 0.4);The patch is drawn as a polygon, starting on the left with the lower bound, then reversing direction to draw the upper bound of the error from right to left. The arguments to patch after this specify the face color, edge color, and transparency.This relatively minimal addition can make your plots much easier to read, particularly if you’re dealing with multiple data sets at the same time where error bars would overlap and be nearly impossible to distinguish."
} ,

{
"title"    : "An Awesomely Useful Thing: Google Keep",
"category" : "",
"tags"     : "Google, Keep, todo, organization, lists",
"url"      : "/2014/10/30/an-awesomely-useful-thing-google-keep.html",
"date"     : "2014 October 30",
"content"  : "An Awesomely Useful Thing: Google KeepI am in constant search of something easy to serve as an external memory for everything I have to do and remember. A list on a piece of paper? Great until you misplace or forget the paper. An app? I thought I’d tried them all: ToDoist, Wunderlist, you name it. ToDoist is nice for individual tasks, but groups of things and notes to myself got complicated fast and I found that I wasn’t actually using it. It did have cross-system support, so I could use it in Chrome and on my iPad and Android phone. That was the major shortfall of many other apps I tried: if I don’t have my phone or computer, I still need my external memory.Then I discovered that Google has its own feature, and I’m surprised that I had never heard of it: Google Keep. Since I am already fully integrated into the Google ecosystem, it fits fantastically with everything else I already use, too. Here’s how it works:##Create NotesYou can make lists, checkbox lists, text, audio, or image notes to keep track of anything you need to. I have a grocery list, a list of things to do at work, and movies I want to watch, for example. These notes all show up on the keep website that you can drag to organize, recolor, and archive when you’re done. Plus, you can add an image to any note. I’m not a fan of most of the colors for the notes (they’re a bit bright for black text), but the whole thing uses Google’s great new Material design and is really slick overall. When you’re done, you can also archive notes instead of deleting them, in case you ever need to go back and check it in the future.##Share NotesYou can share notes. Now you can make blame your roommate for not picking up more milk.##Remind YourselfYou can also set reminders for your notes, by time or place, so you don’t forget what to do when or where you need to do it.##See it EverywhereOne of the most useful features of Keep is that it has a nice web interface, Android app, and iOS app. Creating, organizing, and handling notes is straight forward in all of them without unnecessary distractions. Bonus: there’s a widget for Android, too. Because it’s all connected to your Google account, all of your notes are synced and instantly accessible anywhere you’re logged into Google - no installation necessary.##OverallHaving some way to group or sort notes would be a great additional feature, but even without that it’s a great tool. I’d also like to see integration with reminders in the new Inbox, but that might come with time. Overall, Google Keep is the most painless way I have found to keep my thoughts in control: full-featured without being overwhelming, free and ad-free, and effectively cross-platform."
} ,

{
"title"    : "DrRacket Tricks and Customization",
"category" : "",
"tags"     : "DrRacket, programming, Racket, customization",
"url"      : "/2014/09/10/drracket-tricks-and-customization.html",
"date"     : "2014 September 10",
"content"  : "My first programming class used DrRacket, and I have kept using it for the past three years as a tutor for that class, and now as a TA. Along the way, I’ve learned a bunch of tricks about DrRacket that can make programming in it easier and much more enjoyable.  Customize the color scheme to something you like. I explain how to get a bunch of options in [this post](/2014/09/10/how-to-make-drracket-more-pleasant-looking.html  Go to Edit &amp;gt; Preferences &amp;gt; Editing &amp;gt; General and check the box for “Enable automatic parentheses.” It automatically closes your parentheses and makes your life a lot easier.  In the same tab, also check “Show line numbers”  Instead of writing out lambda all the time, you can use a keyboard shortcut to get the character λ. It’s Ctrl + .  Fix code indentation for a section by highlighting it and pressing Tab.  Fix indentation for your entire file with Ctrl + I.  You can right click on any function name to search for it in the help desk.  You can change the default browser for opening documentation under Edit &amp;gt; Preferences &amp;gt; Browser.  To prevent a zillion windows from opening, go to Edit &amp;gt; Preferences &amp;gt; General and check “Open files in separate tabs”  When working with large programs the program contour is nice for navigating within the file. Turn it on with View &amp;gt; Show Program Contour or with Ctrl + U.  You can change the position of the Interactions area (below vs. to the right of the Definitions area) with View &amp;gt; Use Horizontal Layout."
} ,

{
"title"    : "How to make DrRacket more pleasant-looking",
"category" : "",
"tags"     : "racket, DrRacket, color schemes, COLORS",
"url"      : "/2014/09/10/how-to-make-drracket-more-pleasant-looking.html",
"date"     : "2014 September 10",
"content"  : "DrRacket’s default color scheme isn’t pretty, and there aren’t a lot of alternatives included. Luckily, some programmer before you decided to fix that instead of writing whatever code they were actually supposed to be working on. The result is 54 different color schemes for DrRacket (27 each of dark and light) which can be found here. It’s also really easy to install - you don’t even have to download anything separately. Just fire up a terminal and run:raco pkg install git://github.com/tuirgin/base16-drracketWhen you restart DrRacket and go to Edit &amp;gt; Preferences, the themes should all show up in the Colors tab.I’m currently using one of my favorite themes, Monokai Dark, with the slight modification of setting the “Basic gray parenthesis highlight color” to #3E3D32 (slightly darker than the default).Now you have one less excuse to not be doing your programming homework."
} ,

{
"title"    : "How to &#39;Send Mail As&#39; with Gmail&#39;s recent update",
"category" : "",
"tags"     : "gmail, smtp, email, send mail as",
"url"      : "/2014/08/25/how-to-send-mail-as-with-gmails-recent-update.html",
"date"     : "2014 August 25",
"content"  : "It used to be super easy to set Gmail to send mail as another email address. It recently (as in, this month) became a lot harder, since Gmail now doesn’t let you automatically use its SMTP servers. If that last sentence didn’t make sense, don’t worry. I’ll walk you through how to set it up step by step. To start out, I assume that you already have email forwarding set up so that your custom email (say, me@example.com) gets sent to your gmail (which we’ll call example@gmail.com).  You must have 2-step authentication set up for you Google account. If not, when you try to log in later, you’ll get an authentication failure, and then an email about a suspicious log in attempt.  Once you have 2-step authentication set up, you need a specific app password that you’ll use for setting up the email sending.From any Google page, click on your user picture in upper right corner and select Account. From the Account page, select the Security tab. In the Password box, click Settings next to App Passwords. On the dropdown menu that says Select app, choose Other (custom name). Type in any name you like (I went with Gmail SMTP) and click Generate. Copy the new password.  Now we can actually set this up! From your Gmail page, click the cog icon on the right side and select Settings. Go to the Accounts and Imports tab. In the Send mail as section, click Add another email address you own. In the window that pops up, put in the email address you want to send as (me@example.com) and click Next Step. (Go ahead and change the name and alias settings however you want.) On the next page, enter the information as follows:          SMTP Server: smtp.gmail.com      Port: 465      Username: Your full gmail address, like example@gmail.com      Password: The password you generated and copied in Step 2      Secured Connection ussing SSL (Change the radio button to select this option)        Then click Add Account. An email should show up in your inbox, which you can click to verify the email address. Now, if you go to Accounts and Import in your settings, you should see the new email address.That’s more of a pain than it used to be, and more than it should be, but it is still possible to send email from Gmail using your own custom email address.  Source: A helpful post on Google Product Forums"
} ,

{
"title"    : "Because your placeholder images aren&#39;t adorable enough",
"category" : "",
"tags"     : "kittens, web design, placeholder",
"url"      : "/2014/08/13/because-your-placeholder-images-arent-adorable.html",
"date"     : "2014 August 13",
"content"  : "Because your placeholder images aren’‘t adorable enoughWhen it comes to placeholder images for designing web pages, I tend to use whatever shows up on Google Images when I search for a random word. Or goats. I don’t know why, but lately I’ve used a lot of goats on my web pages.But there’s a simpler, more adorable way! With placekitten, you can simply use a URL to direct to an adorable cat. Do you need a black-and-white 600x300 image? Easy! Just use:&amp;lt;img src=&quot;http://placekitten.com/g/600/300&quot;/&amp;gt;An adorable kitten will show up for your viewing and designing pleasure, like this:"
} ,

{
"title"    : "Updated: Including code in your Tumblr posts (the easy way!)",
"category" : "",
"tags"     : "tumblr, code, markdown",
"url"      : "/2014/08/07/updated-including-code-in-your-tumblr-posts-the.html",
"date"     : "2014 August 7",
"content"  : "My latest obsession is Markdown, the markup language that magically turns almost-plain text into fully-formatted HTML. If you’ve ever written anything on StackExchange or Reddit, you’ve used Markdown. It turns out that Markdown is also supported on Tumblr!To enable it, click on the cog (settings) on the upper right of your Tumblr dashboard. Then click the “Dashboard” option on the right side, scroll down to “Text Editor” and select Markdown. You can check out all of the awesome output that Markdown produces with this cheatsheet.One bonus of Markdown that I’ve discovered is that it’s really great for easily incorporating code into normal-text documents. There are 3 way to do this:##Inline code:Type this:I put some `code` in my text.Get this output:I put some code in my text.##Code blocks:Type this: (with 4 spaces at the beginning of the line).   This is a block        with multiple lines of code.        Ta-da!Get this output:This is a block    with multiple lines of code.    Ta-da!Multi-line code: For a lot of Markdown editors, this does the same this as the 4-spaces approach. On Tumblr, though, it shows up like the single-tick code, but split over multiple lines.Type this:```This is code writtenon multiple lines```Get this output:This is code written on multiple lines"
} ,

{
"title"    : "Making your Linux command line prompt look shiny",
"category" : "",
"tags"     : "linux, terminal, bash, colors!",
"url"      : "/2014/08/07/making-your-linux-command-line-prompt-look-shiny.html",
"date"     : "2014 August 7",
"content"  : "Are you tired of that boring, single color command prompt in your terminal? Do you just need one more way to procrastinate? Or do you, like me, often lose your spot when there is a ton of output and you can’t tell where it started?Whatever the reason, you might want to change up the way the bash prompt looks in your terminal. As it turns out, there’s a simple, awesome tool to help you do that. There’s an interactive GUI to change color, boldnes, and insert text. It will even show you a live preview of what your prompt will look like.Below that on the page, there are a few lines of code to add this customization to your terminal. If you just want to try it out before finalizing, you can just copy and paste the PS1=…….. portion into your terminal. When you finalized what you want, open your bashrc file with nano ~/.bashrc and paste that entire block of code at the bottom. Then restart your terminal to make sure everything worked.The command prompt customization is user-specific, which has a bunch of benefits: it will show up when you SSH into your user, it will show up no matter what terminal you use, and it lets you distinguish between users (so you don’t accidentally do everything as root, for example).Currently, here’s what mine looks like (copy and paste into your terminal to check it out):PS1=&quot;[$(tput bold)][$(tput setaf 2)]nu@h: [$(tput setaf 7)]w[$(tput setaf 3)]n$ [$(tput sgr0)]&quot;"
} ,

{
"title"    : "A simple Django log in page",
"category" : "",
"tags"     : "django, login, template",
"url"      : "/2014/07/10/a-simple-django-log-in-page.html",
"date"     : "2014 July 10",
"content"  : "I just started working with Django and wanted to create a really basic user authentication system. According to the DRY (Don’t Repeat Yourself) principle, I didn’t want to rewrite Django’s built-in login system and end up creating an inferior version. But I also couldn’t find any good examples of how to do this. After lots of Google and StackOverflow, here’s what I came up with.First, set up the url for the login page. Add the following to your project’s urls.py:from django.conf.urls import patterns, urlfrom django.views.generic import RedirectViewurlpatterns = patterns(&#39;&#39;,    # ...    url(r&#39;^login/$&#39;, &#39;django.contrib.auth.views.login&#39;),    url(r&#39;^accounts/profile/$&#39;, RedirectView.as_view(url=&#39;/&#39;)),    url(r&#39;^logout/$&#39;, &#39;django.contrib.auth.views.logout_then_login&#39;),    # ...)The first URL sets /login/ as the login page and uses Django’s built-in login view (which takes care of all of the authentication and error messages).After logging in with the built-in login view, the user is automatically redirected to /accounts/profile/. But with the 2nd URL, you don’t have to worry about setting that up. Instead, the user is automatically redirected to the URL you specify. (In this case, that’s set to the home page.)The 3rd URL is used to log a user out. Going to /logout/ automatically logs the user out and redirects them to the login page. This means all you have to do is have a link to the URL /logout and the rest of the work is all done for you! (You can also use the logout view, but this is the easiest place to start, I think.)With any of these, you can change the URLs to whatever you please.From these URLs, the only page you now have to create is the log in screen. You don’t have to add anything to any views.py, because you’re using a built-in view. All you have to write is the template. Create the file my_project/registration/login.html and put in it:&amp;lt;h2&amp;gt;Log In&amp;lt;/h2&amp;gt;&amp;lt;form method=&quot;post&quot; action=&quot;&quot;&amp;gt;    {% csrf_token %}    {{ form.as_p }}    &amp;lt;input type=&quot;submit&quot; value=&quot;Log in&quot;&amp;gt;&amp;lt;/form&amp;gt;This will display a simple form with fields for the username and password and a submit button. Errors are automatically generated and displayed if the user enters an invalid username/password combination or leaves either of the fields blank. When the user clicks “Log in”, they’re redirected to the URL you specified above.Let’s say that you now want to protect pages so that only logged in users can view them. That’s pretty easy now. Just add the tag @login_required above any view where a user needs to be logged in. And what if they aren’t logged in? They should be re-directed to the login page. To specify what that page is, add this line to your project’s settings.py:LOGIN_URL = &#39;/login&#39;Or whatever URL you chose above as your login page URL. After logging in, the user will be automatically taken back to whatever page they were kicked off of for not being logged in, which is pretty cool.Lastly, you can also style the login page or embed it into a larger template for your project. The trick with this is knowing what the generated HTML elements are in order to style them. I figured it out by inspecting the elements in my browser on that page. Here are a few useful ones:Generated errors: &amp;lt;ul class=&quot;errorlist&quot;&amp;gt;&amp;lt;li&amp;gt;Error&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;Username field: &amp;lt;input id=&quot;id_username&quot; maxlength=&quot;254&quot; name=&quot;username&quot; type=&quot;text&quot;&amp;gt;Password field: &amp;lt;input id=&quot;id_password&quot; name=&quot;password&quot; type=&quot;password&quot;&amp;gt;Here’s the CSS I used to start:form .errorlist {    color: #f00;    list-style-type: none;    padding: 0;    font-style: italic;    margin: 0;    font-size: .9em;}form p {    margin-bottom: 0;}input {    border: 1px solid #999;    display: block;    background-color: #fff;    padding: .25em .5em;    width: calc(100% - 1em);}input[type=&quot;submit&quot;] {    margin-top: 1em;    width: auto;}From that, you can adjust and update, but hopefully if you’ve run across this in the chasm of the internet, I’ve saved you at least some amount of frustration."
} ,

{
"title"    : "Make your own XKCD-style passwords!",
"category" : "",
"tags"     : "XKCD, passwords",
"url"      : "/2014/07/10/make-your-own-xkcd-style-passwords.html",
"date"     : "2014 July 10",
"content"  : "According to XKCD, the most secure passwords are made up of a series of random words, and they are much easier to remember as a human than the random nonsense.But humans are also not good at coming up with things that are even vaguely random. Luckily, computers are!* And someone made a snazzy little script to take advantage of this.Here is a little program to make your own XKCD-style passwords, complete with cool features like acrostics. On that github page, it’s even got directions to install it. (At some point, I’d also like to embed it in a website, but I’m not there yet with my python-embedding skills.) In the meantime, those of you with sufficient computer skills, enjoy!* Yes, I know can’t actually do things truly randomly, but they’re a heck of a lot better than people, and for this, it’ll do."
} ,

{
"title"    : "HTML meta tags",
"category" : "",
"tags"     : "html, meta, tags",
"url"      : "/2014/06/13/html-meta-tags.html",
"date"     : "2014 June 13",
"content"  : "Meta tags in HTML headers never made sense to me.I found that this page provided a nice summary of what they are and why.* Here’s my summary of some of the purposes of the significant meta tags.Description: This is what will probably show up on search engines. Make it shiny.Keywords: This is outdated and no longer used by search engines except to detect spam. Don’t bother with it.ROBOTS: Tell search engines to ignore the page. It’s like a Jedi mind trick. Leave it out if you don’t want to change searchability-related topics.Charset: Tell the internet you’re using English on your page.Note: That link has an outdated way of telling you to set the character set (from HTML4). For HTML5 (the current version), instead use Everything else: It’s probably outdated and/or ignored and not worth using.* See the note about character sets, which is outdated on this link."
} ,

{
"title"    : "Image in excerpt",
"category" : "",
"tags"     : "",
"url"      : "/2014/06/08/image-in-excerpt.html",
"date"     : "2014 June 8",
"content"  : "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve --watch, which launches a web server and auto-regenerates your site when a file is updated.To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.Jekyll also offers powerful support for code snippets:def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll’s dedicated Help repository."
} ,

{
"title"    : "Make your own dot grid paper with Inkscape",
"category" : "",
"tags"     : "inkscape, dots, paper, templates, grid",
"url"      : "/2014/06/04/make-your-own-dot-grid-paper-with-inkscape.html",
"date"     : "2014 June 4",
"content"  : "I like being precise, so I use a lot of graph paper, even for writing. But recently I discovered dot paper, which provides all the precision of graph paper without all the lines!The problem?  I’m a college student who doesn’t want to spend $5 on a small notebook, and I also like loose-leaf paper.The solution?  Make grid paper myself!  (Since I have a $120 university print quota, this is also completely free.) There are templates online, but none of them quite met my specifications, so I decided to make my own in my favorite graphics program: Inkscape.So, let me explain it for people who have absolutely no Inkscape experience whatsoever.First, if you don’t have Inkscape you can get it here.      Make the page the right size    I’m assuming you’ll be printing on “normal” sized sheets of paper.    Go to File → Document Properties (or press Ctrl + Shift + D)In the section for Page Size, select “US Letter” (or A4 if you’re in Europe) and close the dialog.            Create a circle    Select the circle tool from the toolbar (or press F5 to select it).    Drag to create an ellipse (of any size) anywhere on the page.        Mouse over the bottom color bar and look for “50% Gray.” Click to set this as the fill color for the circle.    Mouse over to the far left side for the color “none.” Shift-click this to remove the circle’s outline (if it has one).            Size &amp;amp; position the circle    In the top bar, set the ellipse’s width and height to the spacing you want between your dots.    I use 5 mm. (You can change the units to the right of these boxes.)    Go to Object → Align and Distribute (or press Ctrl + Shift + A)    In the Align section, set “Relative to:” to “Page.”    Select the circle, then click for “Align left edges” and “Align top edges.” Your circle should now be in the top left corner of the page.            Make a grid of big circles    Go to Edit → Clone → Create Tiled Clones.    On the Symmetry tab, “P1: simple translation” should be selected. Set the “Width, height” to at least the size of your page. (Make sure to check the units!)        On the Shift tab, set the “Exponent” values to 1 and everything else to 0.        Make sure everything in the other tabs is set to 0 (except exponents set to 1) and boxes are unchecked.    Click “Create” to make the make the clone grid, then close the dialog.            Resize to make dots    Select the original circle (not any of the clones). It may be covered by a clone. Go ahead and delete that clone.    Back at the top of the window, change the circle’s dimensions to something small. I use 0.5 mm. Now you have a grid!            Save it for printing (PDF)    By default, Inkscape saves SVG files, which you can’t necessarily print elsewhere. Save the file as an SVG for future editing, though.    Then, go to File → Save a Copy. In the save dialog, select PDF as the file format and click Save.    In the next dialog, the default settings should be fine, so just click OK.        Printing    When you go to print, you don’t want to accidentally shrink down your grid. Most printers aren’t borderless, though, so you will have some white space margin on the edges.    When printing make sure to uncheck boxes that say something to the effect of “Shrink page to fit.”  Print out as many as you want and have at it. “It” being whatever you do with dot grid paper in your crazy world."
} ,

{
"title"    : "Shrinking Gnome title bars",
"category" : "",
"tags"     : "linux, gnome, title bar, command line",
"url"      : "/2014/05/29/shrinking-gnome-title-bars.html",
"date"     : "2014 May 29",
"content"  : "I’ve been using Ubuntu Gnome lately, but my biggest pet peeve has always been the big, fluffy title bars. This can be ameliorated a bit by shrinking the Window Titles font size (in the ‘Fonts’ section of the Gnome Tweak Tool), but the big benefit comes from reducing the padding in the title bar.This padding issue became especially important since Gnome 3.10 has moved to the header bar. By integrating the title bar and menus, it can save space… for the programs that take advantage of it. For those that don’t, the result is just a huge title bar. But that can be fixed by reducing the padding, which doesn’t damage the look of the programs using the new header bar.Open a terminal and run:sudo sed -i &quot;/title_vertical_pad/s/value=&quot;[0-9]{1,2}&quot;/value=&quot;5&quot;/g&quot; /usr/share/themes/Adwaita/metacity-1/metacity-theme-3.xmlThen press Alt + F2, type r, and hit enter to restart Gnome for the changes to take effect. This command edits /usr/share/themes/Adwaita/metacity-1/metacity-theme-3.xml to set title_vertical_pad to a value of 5.The trouble with this approach is that it shrinks down the images for the close/maximize/minimize buttons, which are designed to have a lot of padding, basically resulting in them looking like specks (but they’re still clickably-sized). There are two ways to deal with this:      Where the command says &quot;value=&quot;5&quot;, replace the 5 with padding value of your choosing. 0 will make the title bars as thin as possible, while picking a larger value makes the buttons more clickable.        Theoretically, you could also edit the theme to replace the images for the close/maximize/minimize buttons to something with less padding. However, this isn’t something I’ve tried. I know which speck is which, so for me, personally, it’s not worth trying to delve into that.  Source: Mikey’s Help Desk"
} ,

{
"title"    : "When Ubuntu says &quot;System program problem detected&quot; whenever you turn your computer on",
"category" : "",
"tags"     : "linux, bash, crash reports",
"url"      : "/2014/05/29/when-ubuntu-says-system-program-problem-detected.html",
"date"     : "2014 May 29",
"content"  : "Contrary to what I thought, these errors popping up every time you turn the computer on doesn’t mean that there is always a bunch of stuff crashing on start up.  It means that something crashed in the past and somehow never got cleared from the crash reports.  So that means there is a simple fix!All you have to do is clear the crash reports, which you can do with one line in the terminal:sudo rm /var/crash/*And when you reboot, the pesky errors from before shouldn’t make a reappearance.  If something does, it probably really does mean something is crashing on start up and needs to be investigated further.Source: Ask Ubuntu"
} ,

{
"title"    : "Improving Linux Battery Life",
"category" : "",
"tags"     : "Linux, battery, TLP",
"url"      : "/2014/05/13/improving-linux-battery-life.html",
"date"     : "2014 May 13",
"content"  : "Everyone wants to squeeze a bit more time out of their battery.  The simplest trick to improve battery life is reducing screen brightness, but there are also a number of tools that manage laptop power usage to increase battery time.  I’ve had great success so far with TLP, which dynamically manages power depending on whether the laptop is running on battery or AC.  It increased my battery life by over an hour!  There’s a nice description of what exactly it adjusts and how to install it here."
} ,

{
"title"    : "Managing Scientific Papers (for free!)",
"category" : "",
"tags"     : "Mendeley, papers, science, organization, citations",
"url"      : "/2014/05/13/managing-scientific-papers-for-free.html",
"date"     : "2014 May 13",
"content"  : "I have to keep track of a lot of scientific papers.  Previously, I did this by manually naming all of the papers I had in a consistent format (making for looooong file names) and trying to keep them all in the same spot.  This was not terribly effective or well-organized, and did not lend itself to easy searching.I knew of software like Microsoft EndNote, but that costs money and doesn’t work on Linux, which are my two fatal strikes against any software I look at.  At some point, someone pointed out Mendeley to me.  I don’t know how I didn’t discover it before.Mendeley is yet another software for managing papers, citations, and references, but it’s got a lot of things that make it a MUCH better fit for me than EndNote.  For me, these are some of the highlights:  It’s free!  Slick desktop application for Windows, Linux and Mac, and apps for both iOS and Android  It automatically retrieves information about papers when you load in a file  Automatically create citations in pretty much any format  Citation manager for LibreOffice and Microsoft Office, plus BibTeX for LaTeX citations  Detailed search features (including by author, title, keywords, etc.)  Papers can be automatically synced to your Mendeley account to keep up to date on all devices  Sharing papers with a lab or group  Organize papers in folders, subfolders, etc. within the application  Access your library of papers online  Annotate papers within the application  Import papers from web pagesI’ve become rather enamored with Mendeley and haven’t found anything to complain about yet (though I’m sure I will; I always do).You can find out more and download on the Mendeley website."
} ,

{
"title"    : "The simple terminal way to see your IP address",
"category" : "",
"tags"     : "terminal, IP address",
"url"      : "/2014/03/05/the-simple-terminal-way-to-see-your-ip-address.html",
"date"     : "2014 March 5",
"content"  : "If you need to know your IP address, my brother taught me what is probably the simplest way to do so straight from the command line:curl icanhazip.comThe curl command will show the contents of a url in the command line.  (It’s pronounced “see URL”, not like the sport, though if you’re like me you can still wish there was actual curling involved.)The URL that it is requesting, icanhazip.com, is a spectacularly simple page that gives your IP address in plain text on the page.When you do this, all you see is your IP address magically appearing in your terminal window."
} ,

{
"title"    : "A simple bash script to compile Java (with packages) (and possibly JUnit)",
"category" : "",
"tags"     : "Java, bash, script, compiling, command line, packages, JUnit",
"url"      : "/2014/02/26/a-simple-bash-script-to-compile-java-with.html",
"date"     : "2014 February 26",
"content"  : "Compiling Java when you have your code organized into packages gets more complicated because you have to make sure that Java finds all of the correct files to compile.You can use a bash command to find all of the java files in the current folder and all subfolders:find -name &quot;*.java&quot; &amp;gt; sources.txtYou can then compile every file listed in the newly created sources.txt:javac @sources.txtOnce it is compiled, you can run files that are either in the default package:java MyClassOr that are in a package $PACKAGE:java $PACKAGE.MyClassYou can also modify this to include a classpath and/or work with JUnit.  Here is a complete example of compiling the package myPackage (contained in the subfolder of the current directory by the same name) with JUnit (in the directory above the current directory) and running tests that are both inside and outside the package.java -cp $CLASSPATH $JUNITMAINCLASSPATH=&quot;.:../junit.jar&quot;JUNITMAIN=&quot;org.junit.runner.JUnitCore&quot;find -name &quot;*.java&quot; &amp;gt; sources.txtjavac -cp $CLASSPATH @sources.txtjava -cp $CLASSPATH $JUNITMAIN BlackBoxTestjava -cp $CLASSPATH $JUNITMAIN myPackage.WhiteBoxTestYou can also make the script remove old .class files before compiling (which has caused weird things for me).# Remove old class filesfind -name &quot;*.class&quot; &amp;gt; old_class.txtif [ -s old_class.txt ]    then        xargs -a old_class.txt -d&#39;&#39;n&#39;&#39; rmfi"
} ,

{
"title"    : "ssh/ftp/sftp in Nautilus",
"category" : "",
"tags"     : "Linux, nautilus, ssh, ftp, sftp",
"url"      : "/2014/02/26/ssh-ftp-sftp-in-nautilus.html",
"date"     : "2014 February 26",
"content"  : "Sometimes it’s useful to be able to actually see the files that you are accessing remotely.  So, instead of just using ssh in the command line, it’s useful to have a GUI.  Instead of installing extra programs, though, you can just do it directly from within your file browser in Linux.In the Nautilus file manager (which likes to just call itself Files now), just enter into the location bar:ssh://username@hostOr whatever your preferred accessing method is (ssh, stfp, ftp).  (Also useful to remember: the change the location bar from buttons to a text field, hit Ctrl + L.)The remote directory is then mounted and appears on the left side bar under “Network.”  It will stay mounted even if you close Nautilus, and you just have to click on it to re-open it.  To unmount, just click the arrow next to it in the left panel."
} ,

{
"title"    : "Compiling and running Java with JUnit from the command line",
"category" : "",
"tags"     : "java, junit, command line, linux, compile",
"url"      : "/2014/01/30/compiling-and-running-java-with-junit-from-the.html",
"date"     : "2014 January 30",
"content"  : "Here’s how to compile a set of Java files with the JUnit library and then run it.  (All in Linux.  Adapt for any other OSes.  Also using JUnit 4+)  This took me far longer to figure out than I care to admit. [Note: this is only when all files are in the default package.  More on running with packages to come in the future.]In its most generic form:javac -cp &quot;/path/to/junit.jar&quot; *.javajava -cp .:/path/to/junit.jar org.junit.runner.JUnitCore FileToTestThe first line will compile all of the java files in the current directory with the JUnit .jar file in the specified location.  The second command will run the compiled code, where FileToTest is the name of the java class containing your tests.  (And for JUnit to detect the tests, the file name has to end in ‘Test’.)Here is a simple example where everything is in the same directory:javac -cp &quot;junit.jar&quot; *.javajava -cp .:junit.jar org.junit.runner.JUnitCore MyClassTest"
} ,

{
"title"    : "Changing Media Names in Linux",
"category" : "",
"tags"     : "linux, usb, mount, name, rename, command line",
"url"      : "/2013/06/25/changing-media-names-in-linux.html",
"date"     : "2013 June 25",
"content"  : "Unlike in Windows/Mac, you can’t always change the names/labels/mount points from within the file explorer.  The best/most consistent way to do this is (from my experience) for external/USB devices is through the command line.  The most straightforward instructions I have found are on the Ubuntu website.For internal drives/partitions, I have found GParted works well."
} ,

{
"title"    : "How to format code snippets with HTML on Tumblr",
"category" : "",
"tags"     : "html, code, formatting, tumblr",
"url"      : "/2013/06/22/how-to-format-code-snippets-with-html-on-tumblr.html",
"date"     : "2013 June 22",
"content"  : "There are extensions and such out there for this, but they don’t show up in the dashboard, as best I can tell.  And at this point, I’m concerned with formatting individual lines of code to show up differently from the rest of the text.  There are probably multiple ways to be this, but this is my current method.In the post editor, go to edit HTML.   Where you want to insert the code use&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;$CODE&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;Where $CODE is whatever code you want to be formatted.&amp;lt;code&amp;gt; makes it monospaced and marked as code.&amp;lt;pre&amp;gt; saves any formatting you use, such as whitespace (as in, preformatted) and demarcates it by putting it in a box.  Don’t use this for in line code because it always puts it on a new line."
} ,

{
"title"    : "How to make a bash command",
"category" : "",
"tags"     : "bash, code, programming, linux, unix, command",
"url"      : "/2013/03/15/how-to-make-a-bash-command.html",
"date"     : "2013 March 15",
"content"  : "This creates a bash command that can be executed in the terminal (from any directory, as any user, without sh)Create a text file in any location with the first line:#!/bin/bashAdd comments in it on lines starting with #Add the commands you want the script to executeMove the file to the correct location withsudo mv $SCRIPT/usr/bin(Where $SCRIPT is the name of the file)Give it the correct permissions to be executed:sudo chmod 755 /usr/bin/$SCRIPTRun it to make sure everything’s working."
} ,

{
"title"    : "Long code that should scroll but doesn&#39;t always",
"category" : "",
"tags"     : "",
"url"      : "/2010/06/08/long-code.html",
"date"     : "2010 June 8",
"content"  : "12345def print_hi(name)  puts &quot;Hi, #{name}&quot;endprint_hi(&#39;Tom&#39;)#=&amp;gt; prints &#39;Hi, Tom this is a really long line to test wrapping&#39; to STDOUT.Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll’s dedicated Help repository."
} 

]